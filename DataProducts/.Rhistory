library(e1071)
modelFit <- svm(CompressiveStrength ~ ., data=training)
pred <- predict(modelFit, testing)
sqrt(sum((pred-testing$CompressiveStrength)^2))
sum((pred-testing$CompressiveStrength)^2)
pred <- predict(modelFit, training)
sqrt(sum((pred-testing$CompressiveStrength)^2))
pred <- predict(modelFit, testing)
x <- data.frame(pred, testing$CompressiveStrength)
View(x)
View(x)
x$diffsq <- (x$pred-x$testing.CompressiveStrength)^2
View(x)
RMSE <- sqrt(sum(x$diffsq))
ans <- sqrt(RMSE)
RMSE <- sqrt(sum(x$diffsq)/nrow(x))
library(caret)
library(ElemStatLearn)
training <- vowel.train
test <- vowel.test
training$y <- as.factor(training$y)
test$y <- as.factor(test$y)
set.seed(33833)
modelFit <- train(y ~ ., data=training, method = "rf")
modelFit2 <- train(y ~ ., data=training, method = "gbm")
predrf <- predict(modelFit, test)
confusionMatrix(predrf, test$y)
predgbm <- predict(modelFit2, test)
confusionMatrix(predgbm, test$y)
match <- data.frame(predrf, predgbm)
match$yn <- ifelse(match$predrf == predgbm,1,0)
y <- sum(match$yn) / nrow(match)
confusionMatrix(predrf, test$y)
confusionMatrix(predgbm, test$y)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
modelFit1 <- train(diagnosis ~ ., data=training, method = "rf")
pred1 <- predict(modelFit1, testing)
modelFit2 <- train(diagnosis ~ ., data=training, method = "gbm")
pred2 <- predict(modelFit2, testing)
modelFit3 <- train(diagnosis ~ ., data=training, method = "lda")
pred3 <- predict(modelFit3, testing)
predDF <- data.frame(pred1,pred2,pred3, diagnosis=testing$diagnosis)
combModFit <- train(diagnosis ~.,method="rf",data=predDF)
combPred <- predict(combModFit,predDF)
confusionMatrix(pred1, testing$diagnosis)
confusionMatrix(pred2, testing$diagnosis)
confusionMatrix(pred3, testing$diagnosis)
confusionMatrix(combPred, testing$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
lirary(elasticnet)
modelFit <- train(CompressiveStrength ~ ., data=training, method="lasso")
print(modelFit$finalModel)
modelFit$finalModel$beta.pure
library(lubridate)  # For year() function below
file <- "http://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv"
download.file(file, destfile="gaData.csv")
dat = read.csv("./gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
tstest = ts(testing$visitsTumblr)
library(forecast)
modelFit <- bats(tstrain)
fcast <- forecast(modelFit, data=testing, h=235, level=95)
plot(fcast)
inInt <- (tstest <= fcast$upper) & (tstest >= fcast$lower)
y <- sum(inInt) / nrow(testing)
library(caret)
library(randomForest)
file <-'http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv'  #this is training file
download.file(file, destfile="trainingData.csv")
totalData <- read.csv("./trainingData.csv")
completeData <- totalData[,c(8:11, 37:49, 60:68, 84:86, 102, 113:124, 140, 151:160)]
inTrain <- createDataPartition(y=completeData$classe,
p=0.75, list=FALSE)
training <- completeData[inTrain,]
validation <- completeData[-inTrain,]
dim(training)
dim(validation)
set.seed(556)
modelFit <- train(training$classe ~ ., data=training, method="rpart", trControl = trainControl(method = "cv", number = 5))
print(modelFit$finalModel)
modelFit
modelFit
print(modelFit2$finalModel)
print(modelFit$finalModel)
set.seed(557)
modelFit2 <- train(training$classe ~ ., data=training, method="rpart", trControl = trainControl(method = "cv", number = 5))
print(modelFit2$finalModel)
modelFit2
set.seed(558)
library(ipred)
library(plyr)
modelFit3 <- train(training$classe ~ ., data=training, method="treebag", trControl = trainControl(method = "cv", number = 5))
print(modelFit3$finalModel)
modelFit3
set.seed(559)
library(gbm)
modelFit4 <- train(training$classe ~ ., data=training, method="gbm", verbose=FALSE, trControl = trainControl(method = "cv", number = 5))
print(modelFit4$finalModel)
modelFit4
set.seed(556)
modelFit <- train(training$classe ~ ., data=training, method="rf", trControl = trainControl(method = "cv", number = 5))
file2 <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"  #this is testing file
download.file(file2,destfile="testData.csv")
testData <- read.csv("./testData.csv")
testData <- testData[,c(8:11, 37:49, 60:68, 84:86, 102, 113:124, 140, 151:160)]
#names(testData)
pred3 <- predict(modelFit, testData)
confusionMatrix(pred3, testData$classe)
testData <- read.csv("./testData.csv")
View(testData)
testData <- testData[,c(8:11, 37:49, 60:68, 84:86, 102, 113:124, 140, 151:160)]
pred3 <- predict(modelFit, testData)
pred3
pred2 <- predict(modelFit, validation)
confusionMatrix(pred2, validation$classe)
testData$classe
install.packages("shiny")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='kari-innes', token='BD9E948F80007911363D0EF36388973C', secret='ldQExOOdk4MEjVC4Ej+G8tAMjxwfjPfxLb3uRSdL')
deployApp()
library(shinyApp)
library(shinyapp)
library(shinyapps)
deployApp()
runApp()
library(shiny)
runApp()
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(rCharts)
require(rCharts)
library(devtools)
install_github('rCharts', 'ramnathv')
require(airquality)
dTable(airquality, sPaginationType = "full_numbers")
require(rCharts)
dTable(airquality, sPaginationType = "full_numbers")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
runApp()
runApp()
require(diamonds)
?diamond
??diamond
library(UsingR)
diamond
require(ggplot2)
diamond
?diamond
??diamond
diamonds
head(diamonds)
lm(price ~ carat + cut + color + clarity, data=diamonds)
??randomforest
require(randomForest)
?randomForest
plot(price ~ carat + cut + color + clarity, data=diamonds)
randomForest(price ~ carat + cut + color + clarity, data=diamonds)
set.seed(556)
modelFit <- randomForest(price ~ carat + cut + color + clarity, data=diamonds)
finMod <- modelFit$finalModel
finMod
modelFit
head(diamonds)
limitedDiamonds <- diamonds(,c(1:4,7))
limitedDiamonds <- diamonds[,c(1:4,7)]
View(limitedDiamonds)
set.seed(556)
modelFit <- randomForest(price ~ carat + cut + color + clarity, data=limitedDiamonds)
View(limitedDiamonds)
View(limitedDiamonds)
modelFit
View(limitedDiamonds)
inputData <- as.data.frame(0.5, 'Premium', 'E', 'S12')
inputData <- as.data.frame(c(0.5, 'Premium', 'E', 'S12'))
View(inputData)
inputData <- [,(c(0.5, 'Premium', 'E', 'S12')]
inputData <- as.data.frame[,(c(0.5, 'Premium', 'E', 'S12')]
inputData <- data.frame(,1:4)
inputData <- data.frame(c(0.5, 'Premium', 'E', 'S12')
)
View(inputData)
?data.frame
is.data.frame(inputData)
data.frame(inputData)
data.frame(inputData)
d <- data.frame(x = 1, y = 1:10, fac = fac)
L3 <- LETTERS[1:3]
fac <- sample(L3, 10, replace = TRUE)
(d <- data.frame(x = 1, y = 1:10, fac = fac))
View(d)
inputData <- data.frame(matrix(ncol = 4, nrow = 1))
View(inputData)
limitedDiamonds <- diamonds[,c(1:4,7)]
View(limitedDiamonds)
input$carat <- 0.5
input$cut <- "Ideal"
input$color <- "E"
input$clarity <- "S12"
carat <- 0.5
cut <- "Ideal"
color <- "E"
clarity <- "S12"
inputData$carat <- carat
inputData$cut <- cut
inputData$color <- color
inputData$clarity <- clarity
View(inputData)
carat <- 0.5
cut <- "Ideal"
color <- "E"
clarity <- "S12"
inputData$carat <- carat
inputData$cut <- cut
inputData$color <- color
inputData$clarity <- clarity
inputData <- data.frame(matrix(ncol = 4, nrow = 1))
names(inoutData) <- c("carat", "cut", "color", "clarity")
names(inputData) <- c("carat", "cut", "color", "clarity")
View(inputData)
carat <- 0.5
cut <- "Ideal"
color <- "E"
clarity <- "S12"
inputData$carat <- carat
inputData$cut <- cut
inputData$color <- color
inputData$clarity <- clarity
require(UsingR)
require(randomForest)
barplot(price ~ carat + cut + color + clarity, data=diamonds)
limitedDiamonds <- diamonds[,c(1:4,7)]
require(UsingR)
limitedDiamonds <- diamonds[,c(1:4,7)]
diamonds
diamond
require(ggplot2)
limitedDiamonds <- diamonds[,c(1:4,7)]
set.seed(556)
modelFit <- randomForest(price ~ carat + cut + color + clarity, data=limitedDiamonds)
modelFit
#user inputs
carat <- 0.5
cut <- "Ideal"
color <- "E"
clarity <- "S12"
#new data frame to apply prediction model
inputData <- data.frame(matrix(ncol = 4, nrow = 1))
names(inputData) <- c("carat", "cut", "color", "clarity")
inputData$carat <- carat
inputData$cut <- cut
inputData$color <- color
inputData$clarity <- clarity
pred <- predict(modelFit, inputData)
pred
modelFit
ggplot(price ~ carat + cut + color + clarity, data=diamonds)
pair(price ~ carat + cut + color + clarity, data=diamonds)
??pair
plotmatrix(price ~ carat + cut + color + clarity, data=diamonds)
require(GGally)
require(ggplot2)
require(GGally)
require(randomForest)
?ggpairs
ggpairs(data=diamonds, columns=1:4)
limitedDiamonds <- diamonds[,c(1:4,7)]
set.seed(556)
modelFit <- randomForest(price ~ carat + cut + color + clarity, data=limitedDiamonds)
modelFit
#user inputs
carat <- 0.5
cut <- "Ideal"
color <- "E"
clarity <- "S12"
#new data frame to apply prediction model
inputData <- data.frame(matrix(ncol = 4, nrow = 1))
names(inputData) <- c("carat", "cut", "color", "clarity")
inputData$carat <- carat
inputData$cut <- cut
inputData$color <- color
inputData$clarity <- clarity
pred <- predict(modelFit, inputData)
pred
View(limitedDiamonds)
View(inputData)
View(limitedDiamonds)
View(limitedDiamonds)
testData <- createDataPartition(y=limitedDiamonds$price,
p=0.25, list=FALSE)
testData <- limitedData[1:10,]
testData <- limitedDiamonds[1:10,]
pred <- predict(modelFit, testData)
pred
View(limitedDiamonds)
inputData <- data.frame(matrix(ncol = 5, nrow = 1))
names(inputData) <- c("carat", "cut", "color", "clarity", "price")
inputData$carat <- carat
inputData$cut <- cut
inputData$color <- color
inputData$clarity <- clarity
inputData$price <- 0
pred <- predict(modelFit, inputData)
pred
View(inputData)
View(testData)
View(inputData)
View(testData)
View(inputData)
View(testData)
View(inputData)
View(testData)
View(inputData)
View(testData)
View(inputData)
#user inputs
carat <- 0.23
cut <- "Ideal"
color <- "E"
clarity <- "S12"
inputData$carat <- carat
inputData$cut <- cut
inputData$color <- color
inputData$clarity <- clarity
inputData$price <- 0
View(inputData)
View(testData)
View(inputData)
View(testData)
View(inputData)
View(testData)
pred <- predict(modelFit, inputData)
?predict
predict.randomForest <- predict(modelFit, inputData)
predict.randomForest <- predict(modelFit, testData)
str(inputData)
str(testData)
inputData$cut <- as.factor(cut)
str(inputData)
inputData$carat <- carat
inputData$cut <- as.factor(cut)
inputData$color <- as.factor(color)
inputData$clarity <- as.factor(clarity)
inputData$price <- 0
View(inputData)
predict.randomForest <- predict(modelFit, testData)
pred
predict.randomForest <- predict(modelFit, inputData)
str(testData)
distinct(limitedDiamonds$cut)
unique(limitedDiamonds$cut)
inputData$cut <- factor(levels = c("Fair", "Good", "Very Good", "Premium", "Ideal")
)
inputData <- data.frame(matrix(ncol = 5, nrow = 1))
names(inputData) <- c("carat", "cut", "color", "clarity", "price")
inputData$cut <- factor(levels = c("Fair", "Good", "Very Good", "Premium", "Ideal"))
inputData$cut <- as.factor(levels = c("Fair", "Good", "Very Good", "Premium", "Ideal"))
View(inputData)
inputData$cut <- factor(inputData$cut, levels = c("Fair", "Good", "Very Good", "Premium", "Ideal")))
inputData$cut <- factor(inputData$cut, levels = c("Fair", "Good", "Very Good", "Premium", "Ideal"))
unique(limitedDiamonds$color)
limitedDiamonds <- diamonds[,c(1:4,7)]
unique(limitedDiamonds$color)
unique(limitedDiamonds$clarity)
inputData$cut <- factor(inputData$cut, levels = c("Fair", "Good", "Very Good", "Premium", "Ideal"))
inputData$color <- factor(inputData$color, levels = c("D", "E", "F", "G", "H", "I", "J"))
inputData$clarity <- factor(inputData$clarity, levels = c("I1", "SI2", "SI1", "VS2", "VS1", "VVS2", "VVS1", "IF"))
str(testData)
str(limitedDiamonds)
str(inputData)
#user inputs
carat <- 0.23
cut <- "Ideal"
color <- "E"
clarity <- "S12"
inputData$carat <- as.numeric(carat)
inputData$cut <- cut
inputData$color <- color
inputData$clarity <- clarity
inputData$price <- as.integer(0)
View(inputData)
predict.randomForest <- predict(modelFit, inputData)
pred
limitedDiamonds <- diamonds[,c(1:4,7)]
testData <- limitedDiamonds[1:10,]
set.seed(556)
modelFit <- randomForest(price ~ carat + cut + color + clarity, data=limitedDiamonds)
modelFit
#user inputs
carat <- 0.23
cut <- "Ideal"
color <- "E"
clarity <- "S12"
#new data frame to apply prediction model
inputData <- data.frame(matrix(ncol = 5, nrow = 1))
names(inputData) <- c("carat", "cut", "color", "clarity", "price")
inputData$cut <- factor(inputData$cut, levels = c("Fair", "Good", "Very Good", "Premium", "Ideal"))
inputData$color <- factor(inputData$color, levels = c("D", "E", "F", "G", "H", "I", "J"))
inputData$clarity <- factor(inputData$clarity, levels = c("I1", "SI2", "SI1", "VS2", "VS1", "VVS2", "VVS1", "IF"))
inputData$carat <- as.numeric(carat)
inputData$cut <- cut
inputData$color <- color
inputData$clarity <- clarity
inputData$price <- as.integer(0)
predict.randomForest <- predict(modelFit, inputData)
pred
str(inputData)
inputData$cut <- factor(inputData$cut, levels = c("Fair", "Good", "Very Good", "Premium", "Ideal"))
inputData$color <- factor(inputData$color, levels = c("D", "E", "F", "G", "H", "I", "J"))
inputData$clarity <- factor(inputData$clarity, levels = c("I1", "SI2", "SI1", "VS2", "VS1", "VVS2", "VVS1", "IF"))
View(inputData)
str(inputData)
predict.randomForest <- predict(modelFit, inputData)
inputData$carat <- as.numeric(carat)
inputData$cut <- as.factor(cut)
inputData$color <- as.factor(color)
inputData$clarity <- as.factor(clarity)
inputData$price <- as.integer(0)
str(inputData)
inputData <- data.frame(matrix(ncol = 5, nrow = 1))
names(inputData) <- c("carat", "cut", "color", "clarity", "price")
inputData$carat <- as.numeric(carat)
inputData$cut <- as.factor(cut)
inputData$color <- as.factor(color)
inputData$clarity <- as.factor(clarity)
inputData$price <- as.integer(0)
inputData$cut <- factor(inputData$cut, levels = c("Fair", "Good", "Very Good", "Premium", "Ideal"))
inputData$color <- factor(inputData$color, levels = c("D", "E", "F", "G", "H", "I", "J"))
inputData$clarity <- factor(inputData$clarity, levels = c("I1", "SI2", "SI1", "VS2", "VS1", "VVS2", "VVS1", "IF"))
pred <- predict.randomForest(modelFit, inputData)
?predict.randomForest
pred <- predict(modelFit, testData)
pred
pred <- predict(modelFit, inputData)
str(limitedDiamonds)
str(inputData)
inputData$cut <- ordered(inputData$cut, levels = c("Fair", "Good", "Very Good", "Premium", "Ideal"))
inputData$color <- ordered(inputData$color, levels = c("D", "E", "F", "G", "H", "I", "J"))
inputData$clarity <- ordered(inputData$clarity, levels = c("I1", "SI2", "SI1", "VS2", "VS1", "VVS2", "VVS1", "IF"))
str(limitedDiamonds)
str(inputData)
pred <- predict(modelFit, inputData)
pred
require(shiny)
getwd()
runApp("/Users/kariinnes/Documents/datasciencecoursera/DataProducts"
)
shiny::runApp('DataProducts')
shiny::runApp('DataProducts')
shiny::runApp('DataProducts')
shiny::runApp('DataProducts')
shiny::runApp('DataProducts')
library(ggplot2)
head(diamonds)
limitedDiamonds <- diamonds[,c(1:4,7)]
head(limitedDiamonds)
plot(limitedDiamonds)
plot(price ~ carat, limitedDiamonds)
load("~/Documents/datasciencecoursera/DataProducts/server.R")
shiny::runApp('DataProducts')
shiny::runApp('DataProducts')
shiny::runApp('DataProducts')
shiny::runApp('DataProducts')
shiny::runApp('DataProducts')
shiny::runApp('DataProducts')
shiny::runApp('DataProducts')
shiny::runApp('DataProducts')
shiny::runApp('DataProducts')
Coursera Data Products Project - Predicting the Price of a Diamond
shiny::runApp('DataProducts')
getwd()
setwd("/Users/kariinnes/Documents/datasciencecoursera/DataProducts")
deployApp()
library(shinyapps)
deployApp()
library(shinyapps)
setwd("/Users/kariinnes/Documents/datasciencecoursera/DataProducts")
deployApp()
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/shinyapps")
deployApp()

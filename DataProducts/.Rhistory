abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(rCharts)
require(rCharts)
library(devtools)
install_github('rCharts', 'ramnathv')
require(airquality)
dTable(airquality, sPaginationType = "full_numbers")
require(rCharts)
dTable(airquality, sPaginationType = "full_numbers")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
runApp()
runApp()
require(diamonds)
?diamond
??diamond
library(UsingR)
diamond
require(ggplot2)
diamond
?diamond
??diamond
diamonds
head(diamonds)
lm(price ~ carat + cut + color + clarity, data=diamonds)
??randomforest
require(randomForest)
?randomForest
plot(price ~ carat + cut + color + clarity, data=diamonds)
randomForest(price ~ carat + cut + color + clarity, data=diamonds)
set.seed(556)
modelFit <- randomForest(price ~ carat + cut + color + clarity, data=diamonds)
finMod <- modelFit$finalModel
finMod
modelFit
head(diamonds)
limitedDiamonds <- diamonds(,c(1:4,7))
limitedDiamonds <- diamonds[,c(1:4,7)]
View(limitedDiamonds)
set.seed(556)
modelFit <- randomForest(price ~ carat + cut + color + clarity, data=limitedDiamonds)
View(limitedDiamonds)
View(limitedDiamonds)
modelFit
View(limitedDiamonds)
inputData <- as.data.frame(0.5, 'Premium', 'E', 'S12')
inputData <- as.data.frame(c(0.5, 'Premium', 'E', 'S12'))
View(inputData)
inputData <- [,(c(0.5, 'Premium', 'E', 'S12')]
inputData <- as.data.frame[,(c(0.5, 'Premium', 'E', 'S12')]
inputData <- data.frame(,1:4)
inputData <- data.frame(c(0.5, 'Premium', 'E', 'S12')
)
View(inputData)
?data.frame
is.data.frame(inputData)
data.frame(inputData)
data.frame(inputData)
d <- data.frame(x = 1, y = 1:10, fac = fac)
L3 <- LETTERS[1:3]
fac <- sample(L3, 10, replace = TRUE)
(d <- data.frame(x = 1, y = 1:10, fac = fac))
View(d)
inputData <- data.frame(matrix(ncol = 4, nrow = 1))
View(inputData)
limitedDiamonds <- diamonds[,c(1:4,7)]
View(limitedDiamonds)
input$carat <- 0.5
input$cut <- "Ideal"
input$color <- "E"
input$clarity <- "S12"
carat <- 0.5
cut <- "Ideal"
color <- "E"
clarity <- "S12"
inputData$carat <- carat
inputData$cut <- cut
inputData$color <- color
inputData$clarity <- clarity
View(inputData)
carat <- 0.5
cut <- "Ideal"
color <- "E"
clarity <- "S12"
inputData$carat <- carat
inputData$cut <- cut
inputData$color <- color
inputData$clarity <- clarity
inputData <- data.frame(matrix(ncol = 4, nrow = 1))
names(inoutData) <- c("carat", "cut", "color", "clarity")
names(inputData) <- c("carat", "cut", "color", "clarity")
View(inputData)
carat <- 0.5
cut <- "Ideal"
color <- "E"
clarity <- "S12"
inputData$carat <- carat
inputData$cut <- cut
inputData$color <- color
inputData$clarity <- clarity
require(UsingR)
require(randomForest)
barplot(price ~ carat + cut + color + clarity, data=diamonds)
limitedDiamonds <- diamonds[,c(1:4,7)]
require(UsingR)
limitedDiamonds <- diamonds[,c(1:4,7)]
diamonds
diamond
require(ggplot2)
limitedDiamonds <- diamonds[,c(1:4,7)]
set.seed(556)
modelFit <- randomForest(price ~ carat + cut + color + clarity, data=limitedDiamonds)
modelFit
#user inputs
carat <- 0.5
cut <- "Ideal"
color <- "E"
clarity <- "S12"
#new data frame to apply prediction model
inputData <- data.frame(matrix(ncol = 4, nrow = 1))
names(inputData) <- c("carat", "cut", "color", "clarity")
inputData$carat <- carat
inputData$cut <- cut
inputData$color <- color
inputData$clarity <- clarity
pred <- predict(modelFit, inputData)
pred
modelFit
ggplot(price ~ carat + cut + color + clarity, data=diamonds)
pair(price ~ carat + cut + color + clarity, data=diamonds)
??pair
plotmatrix(price ~ carat + cut + color + clarity, data=diamonds)
require(GGally)
require(ggplot2)
require(GGally)
require(randomForest)
?ggpairs
ggpairs(data=diamonds, columns=1:4)
limitedDiamonds <- diamonds[,c(1:4,7)]
set.seed(556)
modelFit <- randomForest(price ~ carat + cut + color + clarity, data=limitedDiamonds)
modelFit
#user inputs
carat <- 0.5
cut <- "Ideal"
color <- "E"
clarity <- "S12"
#new data frame to apply prediction model
inputData <- data.frame(matrix(ncol = 4, nrow = 1))
names(inputData) <- c("carat", "cut", "color", "clarity")
inputData$carat <- carat
inputData$cut <- cut
inputData$color <- color
inputData$clarity <- clarity
pred <- predict(modelFit, inputData)
pred
View(limitedDiamonds)
View(inputData)
View(limitedDiamonds)
View(limitedDiamonds)
testData <- createDataPartition(y=limitedDiamonds$price,
p=0.25, list=FALSE)
testData <- limitedData[1:10,]
testData <- limitedDiamonds[1:10,]
pred <- predict(modelFit, testData)
pred
View(limitedDiamonds)
inputData <- data.frame(matrix(ncol = 5, nrow = 1))
names(inputData) <- c("carat", "cut", "color", "clarity", "price")
inputData$carat <- carat
inputData$cut <- cut
inputData$color <- color
inputData$clarity <- clarity
inputData$price <- 0
pred <- predict(modelFit, inputData)
pred
View(inputData)
View(testData)
View(inputData)
View(testData)
View(inputData)
View(testData)
View(inputData)
View(testData)
View(inputData)
View(testData)
View(inputData)
#user inputs
carat <- 0.23
cut <- "Ideal"
color <- "E"
clarity <- "S12"
inputData$carat <- carat
inputData$cut <- cut
inputData$color <- color
inputData$clarity <- clarity
inputData$price <- 0
View(inputData)
View(testData)
View(inputData)
View(testData)
View(inputData)
View(testData)
pred <- predict(modelFit, inputData)
?predict
predict.randomForest <- predict(modelFit, inputData)
predict.randomForest <- predict(modelFit, testData)
str(inputData)
str(testData)
inputData$cut <- as.factor(cut)
str(inputData)
inputData$carat <- carat
inputData$cut <- as.factor(cut)
inputData$color <- as.factor(color)
inputData$clarity <- as.factor(clarity)
inputData$price <- 0
View(inputData)
predict.randomForest <- predict(modelFit, testData)
pred
predict.randomForest <- predict(modelFit, inputData)
str(testData)
distinct(limitedDiamonds$cut)
unique(limitedDiamonds$cut)
inputData$cut <- factor(levels = c("Fair", "Good", "Very Good", "Premium", "Ideal")
)
inputData <- data.frame(matrix(ncol = 5, nrow = 1))
names(inputData) <- c("carat", "cut", "color", "clarity", "price")
inputData$cut <- factor(levels = c("Fair", "Good", "Very Good", "Premium", "Ideal"))
inputData$cut <- as.factor(levels = c("Fair", "Good", "Very Good", "Premium", "Ideal"))
View(inputData)
inputData$cut <- factor(inputData$cut, levels = c("Fair", "Good", "Very Good", "Premium", "Ideal")))
inputData$cut <- factor(inputData$cut, levels = c("Fair", "Good", "Very Good", "Premium", "Ideal"))
unique(limitedDiamonds$color)
limitedDiamonds <- diamonds[,c(1:4,7)]
unique(limitedDiamonds$color)
unique(limitedDiamonds$clarity)
inputData$cut <- factor(inputData$cut, levels = c("Fair", "Good", "Very Good", "Premium", "Ideal"))
inputData$color <- factor(inputData$color, levels = c("D", "E", "F", "G", "H", "I", "J"))
inputData$clarity <- factor(inputData$clarity, levels = c("I1", "SI2", "SI1", "VS2", "VS1", "VVS2", "VVS1", "IF"))
str(testData)
str(limitedDiamonds)
str(inputData)
#user inputs
carat <- 0.23
cut <- "Ideal"
color <- "E"
clarity <- "S12"
inputData$carat <- as.numeric(carat)
inputData$cut <- cut
inputData$color <- color
inputData$clarity <- clarity
inputData$price <- as.integer(0)
View(inputData)
predict.randomForest <- predict(modelFit, inputData)
pred
limitedDiamonds <- diamonds[,c(1:4,7)]
testData <- limitedDiamonds[1:10,]
set.seed(556)
modelFit <- randomForest(price ~ carat + cut + color + clarity, data=limitedDiamonds)
modelFit
#user inputs
carat <- 0.23
cut <- "Ideal"
color <- "E"
clarity <- "S12"
#new data frame to apply prediction model
inputData <- data.frame(matrix(ncol = 5, nrow = 1))
names(inputData) <- c("carat", "cut", "color", "clarity", "price")
inputData$cut <- factor(inputData$cut, levels = c("Fair", "Good", "Very Good", "Premium", "Ideal"))
inputData$color <- factor(inputData$color, levels = c("D", "E", "F", "G", "H", "I", "J"))
inputData$clarity <- factor(inputData$clarity, levels = c("I1", "SI2", "SI1", "VS2", "VS1", "VVS2", "VVS1", "IF"))
inputData$carat <- as.numeric(carat)
inputData$cut <- cut
inputData$color <- color
inputData$clarity <- clarity
inputData$price <- as.integer(0)
predict.randomForest <- predict(modelFit, inputData)
pred
str(inputData)
inputData$cut <- factor(inputData$cut, levels = c("Fair", "Good", "Very Good", "Premium", "Ideal"))
inputData$color <- factor(inputData$color, levels = c("D", "E", "F", "G", "H", "I", "J"))
inputData$clarity <- factor(inputData$clarity, levels = c("I1", "SI2", "SI1", "VS2", "VS1", "VVS2", "VVS1", "IF"))
View(inputData)
str(inputData)
predict.randomForest <- predict(modelFit, inputData)
inputData$carat <- as.numeric(carat)
inputData$cut <- as.factor(cut)
inputData$color <- as.factor(color)
inputData$clarity <- as.factor(clarity)
inputData$price <- as.integer(0)
str(inputData)
inputData <- data.frame(matrix(ncol = 5, nrow = 1))
names(inputData) <- c("carat", "cut", "color", "clarity", "price")
inputData$carat <- as.numeric(carat)
inputData$cut <- as.factor(cut)
inputData$color <- as.factor(color)
inputData$clarity <- as.factor(clarity)
inputData$price <- as.integer(0)
inputData$cut <- factor(inputData$cut, levels = c("Fair", "Good", "Very Good", "Premium", "Ideal"))
inputData$color <- factor(inputData$color, levels = c("D", "E", "F", "G", "H", "I", "J"))
inputData$clarity <- factor(inputData$clarity, levels = c("I1", "SI2", "SI1", "VS2", "VS1", "VVS2", "VVS1", "IF"))
pred <- predict.randomForest(modelFit, inputData)
?predict.randomForest
pred <- predict(modelFit, testData)
pred
pred <- predict(modelFit, inputData)
str(limitedDiamonds)
str(inputData)
inputData$cut <- ordered(inputData$cut, levels = c("Fair", "Good", "Very Good", "Premium", "Ideal"))
inputData$color <- ordered(inputData$color, levels = c("D", "E", "F", "G", "H", "I", "J"))
inputData$clarity <- ordered(inputData$clarity, levels = c("I1", "SI2", "SI1", "VS2", "VS1", "VVS2", "VVS1", "IF"))
str(limitedDiamonds)
str(inputData)
pred <- predict(modelFit, inputData)
pred
require(shiny)
getwd()
runApp("/Users/kariinnes/Documents/datasciencecoursera/DataProducts"
)
shiny::runApp('DataProducts')
shiny::runApp('DataProducts')
shiny::runApp('DataProducts')
shiny::runApp('DataProducts')
shiny::runApp('DataProducts')
library(ggplot2)
head(diamonds)
limitedDiamonds <- diamonds[,c(1:4,7)]
head(limitedDiamonds)
plot(limitedDiamonds)
plot(price ~ carat, limitedDiamonds)
load("~/Documents/datasciencecoursera/DataProducts/server.R")
shiny::runApp('DataProducts')
shiny::runApp('DataProducts')
shiny::runApp('DataProducts')
shiny::runApp('DataProducts')
shiny::runApp('DataProducts')
shiny::runApp('DataProducts')
shiny::runApp('DataProducts')
shiny::runApp('DataProducts')
shiny::runApp('DataProducts')
Coursera Data Products Project - Predicting the Price of a Diamond
shiny::runApp('DataProducts')
getwd()
setwd("/Users/kariinnes/Documents/datasciencecoursera/DataProducts")
deployApp()
library(shinyapps)
deployApp()
library(shinyapps)
setwd("/Users/kariinnes/Documents/datasciencecoursera/DataProducts")
deployApp()
if (!require("devtools"))
install.packages("devtools")
devtools::install_github("rstudio/shinyapps")
deployApp()
library(shinyApps)
library(shinyapp)
library(shinyapps)
getwd()
deployApp()
shiny::runApp()
install(randomForest)
install.packages(randomForest)
install.packages("randomForest")
shiny::runApp()
getwd()
deployApp
install.packages("shinyapp")
deployApp()
??deploy
deployApp {shinyapps}
deployApp()
library(shinyapps)
deployApp()
deployApp()
shiny::runApp()
deployApp()
shiny::runApp()
library(shiny)
require(ggplot2)
library(randomForest)
nrow(diamonds)
limitedDiamonds <- diamonds[c(1:5000, 10000:15000, 18000:23000, 32000:37000,45000:50000) ,c(1:4,7)]
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp()
library(shinyapp)
library(shinyapps)
deployApp()
getwd()
setwd("/Users/kariinnes/Documents/datasciencecoursera/Data_Products")
shiny::runApp('~/Documents/datasciencecoursera/DataProducts')
library(shinyapps)
deployApp()
shiny::runApp()
shiny::deployApp()
library(shinyapps)
deployApp()
shiny::runApp()
shiny::runApp('~/Documents/datasciencecoursera/Data_Products')
deployApp()
library(shinyapps)
deployApp()
shiny::runApp('~/Documents/datasciencecoursera/Data_Products')
deployApp()
library(shinyapps)
deployApp()
deployApp()
getwd()
setwd("/Users/kariinnes/Documents/datasciencecoursera/Data_Products")
deployApp()
install.packages("RInside")
shiny::runApp()
shiny::runApp()
deployApp()
shiny::runApp()
deployApp()
?tree
??tree
?rpart
shiny::runApp()
shiny::runApp()
deployApp()
deployApp()
require(ggplot2)
deployApp()
?rpart
require(rpart)
deployApp()
shiny::runApp()
shiny::runApp()
deployApp()
shiny::runApp()
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
load("~/Documents/datasciencecoursera/Data_Products/server.R")
shiny::runApp('~/Documents/datasciencecoursera/Data_Products')
require(shiny)
require(ggplot2)
require(rpart)
limitedDiamonds <- diamonds[, c(1:4,7)]
set.seed(556)
modelFit <- rpart(price ~ cut + carat + color + clarity,data=limitedDiamonds)
modelFit
varImport <- importance(modelFit)
varImp(modelFit, scale = FALSE)
??varImp
library(caret)
varImp(modelFit, scale = FALSE)
modelFit <- rpart(price ~ carat + color + clarity,
data=limitedDiamonds)
modelFit
inputData <- limitedDiamonds[1,]
inputData$carat <- as.numeric(.5)
inputData$cut <- ordered(as.factor("Good"))
inputData$color <- ordered(as.factor("G"))
inputData$clarity <- ordered(as.factor("VS1"))
inputData$price <- as.integer(0)
pricePrediction <- predict(modelFit, finalData())
pricePrediction <- predict(modelFit, inputData())
pricePrediction <- predict(modelFit, inputData)
confusionMatrix(pricePrediction, inputData$price)
modelFit <- rpart(price ~ cur + carat + color + clarity,
data=limitedDiamonds)
modelFit
pricePrediction <- predict(modelFit, inputData)
confusionMatrix(pricePrediction, inputData$price)
inputData$color <- ordered(as.factor("H"))
pricePrediction <- predict(modelFit, inputData)
inputData$carat <- as.numeric(1)
pricePrediction <- predict(modelFit, inputData)
modelFit
inputData$carat <- as.numeric(1.5)
pricePrediction <- predict(modelFit, inputData)
inputData$color <- ordered(as.factor("E"))
pricePrediction <- predict(modelFit, inputData)
shiny::runApp('~/Documents/datasciencecoursera/Data_Products')
shiny::runApp('~/Documents/datasciencecoursera/Data_Products')
library(shinyapps)
getwd()
setwd("/Users/kariinnes/Documents/datasciencecoursera/Data_Products")
deployApp()
shiny::runApp()
library(shinyapps)
deployApp()
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
deployApp()
shiny::runApp()
deployApp()
shiny::runApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
